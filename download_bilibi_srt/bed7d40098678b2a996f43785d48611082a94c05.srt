0
6.64 --> 10.48
（MAC OS关于安全性的改进）

1
12.88 --> 13.98
大家早上好

2
15.15 --> 16.38
感谢大家今天来参加我们的演讲

3
17.58 --> 18.68
我是Garrett

4
18.75 --> 21.45
我在Apple安全工程
和架构团队工作

5
22.05 --> 24.46
今天我们要讲
macOS Catalina中

6
24.86 --> 26.06
关于安全性的一些改进

7
29.03 --> 30.23
这是本场演讲的进度安排

8
30.83 --> 33.77
我们要深入地讲一下
纵深防御的安全性原则

9
33.83 --> 35.2
以及如何在macOS中实施
安全防御原则

10
36.1 --> 39.37
然后我们要深入macOS
安全模型的两个截然不同的部分

11
39.91 --> 42.14
Gatekeeper
和用户隐私权保护

12
45.15 --> 46.65
让我们先从纵深防御开始讲

13
46.71 --> 47.41
（纵深防御）

14
47.48 --> 50.48
对于macOS这样一种既复杂

15
50.55 --> 52.55
又有很多用例的产品来说

16
54.15 --> 56.72
没有任何一种技术或功能

17
56.79 --> 58.79
可以独立提供完美的安全性

18
59.86 --> 63.6
因此在设计macOS时
考虑到了安全性的许多不同层面

19
64.36 --> 66.73
每个层面都有具体的目的或目标

20
68.64 --> 72.51
并且每一年我们都会改进
每一个层面的技术和政策

21
72.91 --> 75.61
从而保证你们的安全

22
78.64 --> 80.78
这就是纵深防御的原则的一个应用

23
82.05 --> 85.35
目标是确保其中一个层面的
安全保护失败

24
86.12 --> 88.99
不会破坏系统的整个安全模型

25
91.72 --> 94.66
相反 我们依赖于通过不同性能

26
95 --> 96.13
提供多重保护

27
96.9 --> 100.07
有些层面可以拖延攻击者的前进

28
101.1 --> 103.84
其它层面可以减少某组件的攻击面

29
104.57 --> 106.67
有一些层面可以创建阻碍

30
107.01 --> 109.01
可以让它更轻松地防御特定资产

31
113.28 --> 116.18
今天我们在这里要谈macOS中

32
116.85 --> 118.19
关于安全性的两个截然不同的层面

33
119.22 --> 121.79
首先我们先稍微讲一下
Gatekeeper

34
122.36 --> 124.53
它是安全性的一个很重要的外部层面

35
124.96 --> 126.79
用于第一时间防止恶意软件

36
126.86 --> 128.96
在你的系统上运行

37
131.13 --> 133.83
然后我们会讲用户隐私权保护

38
134.57 --> 137.24
用于确保即使恶意软件

39
137.3 --> 138.87
能应付Gatekeeper

40
139.27 --> 142.94
它也不一定可以访问
绝大多数敏感性数据和资源

41
145.88 --> 146.95
让我们讲一下Gatekeeper

42
148.01 --> 149.95
初次引入Gatekeeper时

43
150.45 --> 152.02
与开发者ID程序一起

44
152.65 --> 154.72
它的目标是防止广泛的…

45
155.25 --> 158.82
防止爆发 防止恶意软件的广泛爆发

46
160.03 --> 162.7
但多年以来 它的目标有所扩大

47
163.36 --> 166.1
现在它用于保护用户

48
166.17 --> 169.34
不运行恶意软件 并让用户控制

49
169.8 --> 171.21
他们在Mac上所运行的东西

50
173.01 --> 176.34
它的具体实现方式在多年以来
也发生了变化

51
177.14 --> 178.65
虽然有很多细微差别

52
179.05 --> 183.38
但Gatekeeper的意图通常
可以归结为几个简单的问题

53
184.72 --> 187.62
我们谈谈如今Gatekeeper
是如何实现这个目标的

54
190.52 --> 193.46
有四件事我们认为是
Gatekeeper扫描的一部分

55
195.13 --> 196.1
第一件事…

56
199.47 --> 201.8
第一是恶意内容扫描

57
202.9 --> 205.74
从而确保在即将运行的app中

58
206.24 --> 207.57
没有任何已知的恶意内容

59
210.21 --> 212.81
第二是署名验证

60
213.25 --> 215.62
从而确保app没有被篡改

61
215.92 --> 217.48
因为开发者对它署名了

62
220.85 --> 222.89
第三是身份验证

63
223.49 --> 226.53
我们正是用这个来强制实施计算机的
本地安全性政策

64
227.26 --> 229.6
如果用户选择了

65
229.66 --> 230.53
他们只希望运行
来自App Store

66
231 --> 232.1
或已认证的开发者的软件

67
232.67 --> 235.47
我们就不允许运行由其它任何人署名

68
235.54 --> 237.14
或根本没有署名的软件

69
240.11 --> 242.28
最后是首次启动提示

70
242.88 --> 246.45
这是为了确保用户实际上希望
运行这个app

71
249.58 --> 251.82
如果我们不讲
Gatekeeper何时检查

72
252.35 --> 254.56
我们就不能讲
Gatekeeper检查什么

73
255.99 --> 257.29
在macOS Mojave中

74
258.23 --> 263.6
Gatekeeper在经由
LaunchServices启动

75
264.26 --> 265.6
隔离软件的首次启动时运行它的扫描

76
267.47 --> 268.9
为了更好地理解

77
269.17 --> 271.24
我们需要深入了解一下
隔离是什么意思

78
271.7 --> 273.77
以及它对于经由LaunchServices
启动意味着什么

79
274.71 --> 275.74
让我们看一下吧

80
279.11 --> 280.78
隔离是一种技术

81
281.18 --> 285.95
它嵌入在macOS中用于标记

82
286.59 --> 287.62
从设备以外的其它地方
到达设备的文件

83
288.19 --> 290.26
当你从web浏览器中下载文件时

84
290.79 --> 293.76
或当某人通过iMessages
给你发送某些东西时

85
294.6 --> 297.8
或如果你进行隔空投送
那些文件都会被隔离

86
299.03 --> 300.03
此外

87
300.3 --> 304.17
macOS将向那个文件添加
关于它的来源的元数据

88
305.24 --> 306.84
当我们呈现首次启动提示时

89
307.21 --> 310.94
我们可以为你提供
关于文件来源的更多情境

90
312.41 --> 315.15
现在隔离是一个选择加入模型

91
315.98 --> 316.98
那意味着app

92
317.05 --> 319.89
需要选择加入才能隔离
它们放在磁盘上的文件

93
321.32 --> 324.12
这通常意味着当app在后台下载时

94
324.39 --> 327.59
作为比如自我更新的一部分

95
327.96 --> 329.86
那些文件通常永远不会被隔离

96
331.8 --> 334.3
有个例外情况
除非app是沙盒化app

97
335.17 --> 338.4
因为默认隔离沙盒化app的文件

98
341.27 --> 343.51
这会帮助你更好地了解系统上

99
343.58 --> 344.85
哪些文件会被隔离

100
345.58 --> 347.92
现在让我们谈谈启动服务

101
351.32 --> 354.56
启动服务是一个框架
用于发现并启动app

102
355.76 --> 358.29
通常在你能想到的在Mac上

103
358.36 --> 360.46
启动app的绝大多数方式中
都使用了启动服务

104
361.36 --> 364.26
比如当你在Finder
或Dock中打开app时

105
364.67 --> 365.83
将会使用启动服务

106
366.93 --> 368.97
如果你使用了
NSWorkspace API

107
369.4 --> 371.5
通常也会使用启动服务

108
372.67 --> 374.77
当app经由文档处理器

109
374.84 --> 376.18
或直接经由URL打开时

110
376.48 --> 377.85
都会使用启动服务

111
380.75 --> 382.22
在接下来的演讲中

112
382.52 --> 385.69
当我具体讲经由启动服务路径的
某些东西时

113
385.75 --> 387.35
我将使用这个Finder图标

114
393.26 --> 395.3
但还有许多加载代码的方式

115
395.83 --> 397.33
不经由启动服务

116
398.5 --> 400.43
这是其中一些例子但并不详尽

117
400.8 --> 403.77
包括使用NSTask来启动进程

118
404.84 --> 406.91
或exec和
posix spawn的调用

119
408.04 --> 411.35
或使用NSBundle API
向进程中加载库

120
411.41 --> 412.91
用于加载或dlopen

121
415.01 --> 416.45
在接下来的演讲中

122
417.62 --> 419.12
当我提及不经由启动服务路径
加载代码时

123
419.82 --> 423.46
我将使用这个终端图标

124
426.73 --> 429.7
现在让我们以一种

125
430.16 --> 432.63
更容易谈论今年的变化的形式

126
432.7 --> 433.9
迅速总结一下
关于Gatekeeper的信息

127
437.24 --> 440.37
在这里我们可以看到

128
441.21 --> 444.24
在启动服务路径上
隔离软件首次启动时

129
444.91 --> 446.38
Gatekeeper的行为
和macOS Mojave

130
447.21 --> 449.48
Gatekeeper
将实施恶意内容扫描

131
449.98 --> 452.75
和署名检查 以确保没有任何已知的
恶意内容

132
452.82 --> 454.79
以及app没有被篡改过

133
456.62 --> 458.39
然后它会实施本地政策检查

134
458.99 --> 461.76
默认情况是app必须
由开发者ID证书

135
462.4 --> 463.26
或由App Store进行签名

136
464.67 --> 467.1
最后它会给用户呈现首次启动提醒

137
467.47 --> 469.14
从而用户必须批准app

138
470.77 --> 476.34
从最新发布的macOS Mojave
10.14.5起

139
477.34 --> 479.41
默认政策发生了轻微的改变

140
480.11 --> 482.35
新的Mac开发者证书

141
482.85 --> 486.09
要求他们的软件必须经过公证
才能通过Gatekeeper

142
488.79 --> 491.82
这就是我们在macOS Catalina
中的第一个改进

143
492.69 --> 496.13
我们扩展了这个政策

144
496.6 --> 497.73
从而所有新软件都需要进行公证

145
499.93 --> 504.47
在这种情况下 “新”的意思是

146
504.84 --> 507.24
在2019年6月1日以后签名
或创建的软件

147
508.94 --> 512.21
这意味着全部现有软件将继续通过
Gatekeeper

148
512.28 --> 513.55
不予改变

149
514.08 --> 516.15
只需要开发者ID证书签名即可

150
517.05 --> 520.42
但所有新软件必须经过公证才能通过
Gatekeeper

151
524.79 --> 525.76
现在…

152
526.56 --> 528.83
我们在macOS Catalina中
所做的下一个改进是

153
529.6 --> 531.53
Gatekeeper将扩展到

154
532.5 --> 536.54
在所有隔离软件上强制实施
同样的政策

155
538.07 --> 539.71
那意味着无论

156
539.77 --> 541.24
软件是如何加载的

157
541.88 --> 546.58
如果它是隔离软件
它必须包含无已知恶意内容

158
547.25 --> 548.68
它必须没有被篡改

159
549.45 --> 551.55
新软件将需要进行公证

160
552.75 --> 554.79
首次启动政策也有些微改变

161
555.22 --> 558.33
我们不要求用户批准

162
558.89 --> 561.73
独立的可执行文件或库的首次启动

163
562.5 --> 565.43
但对于所有捆绑软件来说
都将显示首次启动提示

164
569.17 --> 570.84
因此现在
Gatekeeper扩展到了

165
570.9 --> 574.24
扫描所有隔离软件
并在所有隔离软件上强制实施政策

166
575.81 --> 578.61
这就把我们引向我们在macOS
Catalina中做的最后一改进

167
579.88 --> 581.91
Gatekeeper将为你
提供进一步的保护

168
583.08 --> 586.59
通过确保所有软件都进行了
恶意内容扫描来实现

169
589.56 --> 592.16
那意味着无论软件是否被隔离

170
593.03 --> 594.76
无论代码是如何加载的

171
595.63 --> 597.7
只要找到任何已知恶意内容

172
598.37 --> 601.24
软件都将被阻止…并且会警告用户

173
604.54 --> 607.91
这就是Gatekeeper
在macOS Catalina中的所有扩展

174
607.98 --> 611.54
从而为你提供保护

175
613.58 --> 615.48
重点是要记住一件事

176
618.28 --> 621.12
我们的目标是默认保护每一个
Mac用户的安全

177
622.59 --> 626.66
而不是阻止你想在
Mac上运行的软件

178
626.73 --> 628.63
（你总是可以选择在你的系统上
运行任意软件）

179
628.7 --> 630.6
那意味着总是有一种方式

180
630.96 --> 632.8
可以让你运行

181
633.07 --> 635.24
你想在你的系统上运行的特定软件

182
639.41 --> 642.44
刚才我稍微提了一下

183
642.51 --> 645.58
我们一直持续不断地改进

184
645.65 --> 646.95
每个层面的技术和政策

185
648.35 --> 650.55
我还想花点时间稍微提一下

186
651.82 --> 652.82
Gatekeeper的下一个改进

187
654.82 --> 656.96
现在我们安全工程团队

188
657.59 --> 658.56
有一个很大的目标

189
658.96 --> 663.1
我们想让macOS
和iOS一样安全

190
664.03 --> 666.23
同时仍保持

191
666.73 --> 668.5
你所期待的Mac的所有灵活性

192
669.7 --> 671.64
那代表着一些非常有意思的挑战

193
673.01 --> 674.58
但有一件事变得非常清楚

194
676.21 --> 679.18
平台的安全性已经变得越来越依赖于

195
679.25 --> 680.91
代码签名的有效性了

196
684.62 --> 687.55
这意味着如果app没有签名…

197
689.69 --> 691.52
将不可能检测到篡改

198
694.73 --> 698.63
更进一步
如果捆绑签名在运行时损坏

199
701.1 --> 706.47
当In-Out在运行时自我修改时

200
706.54 --> 708.44
将很难区分恶意篡改和一般篡改

201
713.45 --> 715.22
在未来版本的macOS中

202
715.85 --> 718.09
将默认不再运行任何无签名的代码

203
721.96 --> 723.06
为了实现这个目标

204
723.12 --> 726.53
你们可以做一些事情

205
726.83 --> 727.73
来帮助改善平台的安全性

206
729.46 --> 733.97
首先是签署并公证你所发布的
所有软件

207
734.57 --> 736.17
即使它目前没有被隔离

208
739.17 --> 740.37
（我们需要你们的帮助）

209
741.01 --> 742.18
第二…

210
742.68 --> 746.05
不要在运行时损坏app或捆绑签名

211
746.98 --> 748.82
如果你需要更新app

212
749.08 --> 751.49
请确保最后的结果是磁盘上的app

213
751.82 --> 753.92
仍进行了适当的签名和公证

214
757.49 --> 761.13
最后请记住加载代码可能会失败

215
761.76 --> 763.96
如果你尝试加载隔离库或进程

216
764.03 --> 765.57
而用户选择不运行它的话

217
766.3 --> 770.57
那将会运行失败 请确保你的app
会优雅地处理这些失败

218
776.48 --> 779.38
这就是Gatekeeper的
所有扩展

219
779.65 --> 782.12
从而尝试防止在你的Mac上
运行恶意软件

220
783.25 --> 784.55
现在让我们邀请Kelly上台

221
784.62 --> 787.19
讲一下在用户隐私权保护方面的改进

222
787.25 --> 788.15
（用户隐私权保护）

223
788.22 --> 789.06
Kelly

224
794.13 --> 795.13
嗯 谢谢Garrett

225
795.53 --> 796.46
大家早上好

226
796.76 --> 797.66
我是Kelly Yancey

227
797.73 --> 799.5
我和Garrett都是
Apple安全工程

228
799.57 --> 800.83
与架构团队的一员

229
801.34 --> 804.2
去年在WWDC 2018时

230
804.74 --> 807.91
我很荣幸地介绍了

231
808.24 --> 809.51
macOS Mojave中的
新的隐私权保护

232
809.91 --> 811.38
具有广泛特征…抱歉

233
812.31 --> 813.15
让我们回顾一下

234
813.21 --> 816.48
这些保护用于提高用户

235
816.55 --> 818.85
对于如何访问他们的数据的透明度

236
819.12 --> 820.82
并为用户提供对那些访问的控制

237
821.29 --> 822.89
今天我能再次回到这里
我感到很激动

238
823.22 --> 825.96
我要与大家分享我们在
macOS Catalina中所做的改进

239
827.49 --> 829.1
具有广泛特征

240
830.53 --> 832.63
隐私权保护要求用户准许

241
832.93 --> 835
访问可能会记录用户的硬件

242
835.07 --> 836.97
比如摄像头或麦克风

243
838.04 --> 841.04
或准许访问用户的隐私敏感文件
或文件夹

244
841.91 --> 843.91
比如照片、邮件或消息

245
845.25 --> 847.58
此外还保护

246
847.98 --> 849.35
自动化其它app的能力

247
849.72 --> 853.72
从而用户可以控制在app之间
如何共享他们的数据

248
854.99 --> 857.22
今天我想先讲记录功能

249
858.79 --> 860.09
自macOS Mojave起

250
860.53 --> 863.96
在app访问摄像头或麦克风之前
必须先经过用户准许

251
865.07 --> 866.37
然后在
macOS Catalina中

252
866.83 --> 870.17
进一步要求用户准许记录
他们屏幕上的内容

253
870.87 --> 872.51
或他们在键盘上键入的键

254
873.51 --> 874.74
这很重要

255
875.01 --> 877.58
因为这就好比我们不希望人们
“肩窥”一样

256
877.64 --> 880.51
越过我们的肩膀来看我们正在做什么
或正在输入什么

257
881.11 --> 884.25
我们不希望app偷窥

258
884.88 --> 887.79
我们的联系信息、银行信息

259
887.86 --> 889.12
或密码等等

260
889.79 --> 891.63
无论是有意或无意的

261
893.59 --> 894.66
我们该如何实现呢？

262
894.73 --> 896.16
让我们先看一下屏幕记录

263
897.76 --> 900.73
这是使用
CGDisplayStream

264
901.2 --> 903.14
实时记录显示屏上的内容的简单示例

265
903.9 --> 905.24
在macOS Catalina上

266
905.3 --> 907.81
这个app首次运行时…

267
908.61 --> 911.21
将会执行创建
CGDisplayStream的调用

268
912.04 --> 913.88
它将返回无

269
914.68 --> 916.05
并显示一个对话框

270
916.58 --> 919.05
指导用户进入安全和隐私首选项

271
920.45 --> 923.02
如果用户希望app记录屏幕的话

272
923.76 --> 924.83
用户可以批准它这样做

273
927.06 --> 930.26
当读取其它app窗口中的内容时
也一样

274
931.06 --> 933.5
比如有个功能是把窗口中的内容

275
933.57 --> 935.34
保存为磁盘上的一张图片

276
936.84 --> 940.07
很显然
对CGWindowListCreateImage的调用

277
941.07 --> 943.51
可以返回无
前提是如果给它传递的窗口ID

278
944.24 --> 946.85
不属于发起调用的app

279
947.65 --> 950.68
并且也不属于桌面背景图

280
951.22 --> 952.29
或菜单栏

281
952.35 --> 954.35
我想强调的是 这是背景图

282
954.42 --> 958.29
它不包含桌面上的任何图标
或任何文件的名称

283
961.03 --> 963.03
可能会给用户显示授权对话框

284
963.36 --> 966.87
指导用户批准app

285
966.93 --> 968.07
进行屏幕记录

286
968.13 --> 971.64
因为对话框只在首次记录时显示

287
971.71 --> 975.51
CGWindowListCreateImage
或CGDisplayStream

288
975.84 --> 978.31
可能会由于没有批准屏幕记录而失败

289
980.81 --> 983.48
我要讲的另一个

290
983.55 --> 985.59
与屏幕记录相关的外围话题是
窗口元数据

291
986.89 --> 990.12
app可以使用Core Graphics框架的
CGWindowListCopyWindowInfo函数

292
990.56 --> 994.19
查询关于屏幕上打开或处于后台的
窗口的元数据

293
996.83 --> 1001.24
所返回的元数据包含
窗口的尺寸和位置

294
1001.67 --> 1003.37
和唯一的窗口标识符

295
1003.44 --> 1005.24
以及拥有窗口的app的

296
1005.64 --> 1007.04
标识符的名称和进程

297
1008.91 --> 1012.18
然而窗口名称和共享状态不可用

298
1012.45 --> 1015.68
除非用户预批准app可以进行
屏幕记录

299
1016.65 --> 1018.78
这是因为有些app会在窗口名称中
添加一些敏感性数据

300
1018.85 --> 1024.19
比如账户名称或更可能是网页URL

301
1025.42 --> 1028.46
并且CGWindowListCopyWindowInfo

302
1029 --> 1030.6
永远不会触发授权提示

303
1030.66 --> 1033.6
但它会过滤它给调用它的app
所返回的元数据

304
1034.2 --> 1037.6
因此如果你的app依赖于
获取窗口名称

305
1037.67 --> 1038.51
比如说

306
1039.2 --> 1040.97
你会发现所返回的元数据

307
1041.04 --> 1042.34
不包含窗口名称

308
1042.91 --> 1046.75
你可能想警告用户并把用户指向隐私

309
1046.81 --> 1048.18
安全与隐私首选项设置

310
1050.12 --> 1051.85
这里有一个示例函数

311
1052.59 --> 1055.36
在每次显示中都可以获取

312
1055.92 --> 1058.13
桌面背景图的唯一窗口标识符

313
1058.89 --> 1060.66
再一次 背景图

314
1060.73 --> 1063.43
不包含桌面上的图标

315
1066.5 --> 1070.04
这个函数首先会获取屏幕上
所有窗口的一个列表

316
1070.34 --> 1073.21
使用CGWindowListCopyWindowInfo
函数实现

317
1074.61 --> 1077.94
然后它获取
Core Graphics

318
1078.21 --> 1081.28
用于桌面背景图窗口的窗口级别
或Z序

319
1083.22 --> 1087.15
然后再过滤整个窗口列表

320
1087.22 --> 1089.12
只保留桌面背景窗口级的窗口

321
1090.36 --> 1093.09
如果你从网上查一下
你会发现许多代码样本

322
1093.16 --> 1096.03
都是按kCG窗口名称过滤的

323
1096.3 --> 1099.13
因为窗口名称可能包含
隐私敏感性信息

324
1099.47 --> 1102.17
可能要求用户预批准app
进行屏幕记录

325
1103.2 --> 1106.27
然而通过以窗口级别而不是窗口名称

326
1106.54 --> 1108.94
识别桌面背景窗口

327
1109.74 --> 1112.65
无论用户是否预批准app
进行屏幕记录

328
1112.71 --> 1113.75
都能进行识别

329
1113.81 --> 1117.58
这正是app设计的小修改

330
1117.65 --> 1120.92
可以导致用户体验的

331
1121.32 --> 1122.72
大改变的一个例子

332
1123.36 --> 1124.72
（Catalina中的记录保护）

333
1125.76 --> 1129.33
这是macOS Catalina
保护你屏幕上的内容

334
1129.4 --> 1130.83
不经你允许就被记录下来的方式

335
1131.37 --> 1134.93
app可以自由记录
它们自己的窗口中的内容

336
1136.27 --> 1138.54
菜单栏和桌面背景图

337
1139.74 --> 1142.78
但用户必须使用
安全与隐私首选项设置

338
1143.18 --> 1147.18
预批准app记录整个屏幕

339
1147.58 --> 1149.55
或除它们自己的窗口之外的
窗口的内容

340
1152.05 --> 1154.12
我想讲一下
在macOS Catalina中

341
1154.19 --> 1156.66
受保护的其它记录功能：你的键盘

342
1158.26 --> 1160.19
现在绝大多数用户都期待

343
1160.66 --> 1164.2
他们的键盘
只能用于他们所交互的app

344
1164.26 --> 1165.3
也就是处于最前的app

345
1166 --> 1168.37
并且绝大多数app都仅当用户

346
1168.43 --> 1169.97
正在使用它们时才会要求键盘输入

347
1170.3 --> 1173.07
事实上如果你的app使用了
标准的UI组件

348
1173.37 --> 1174.61
它们会自动处理

349
1174.67 --> 1176.51
提交到你的app的键盘事件

350
1177.68 --> 1179.61
有些app希望能在键盘事件

351
1180.11 --> 1182.25
提交到app时进行拦截

352
1182.75 --> 1185.99
这没问题 可以通过创建
NSApplication的子类

353
1186.39 --> 1187.92
并覆盖sendEvent方法实现

354
1188.45 --> 1189.62
或像这里所显示的这样

355
1189.89 --> 1193.39
你可以使用NSEvent的
addLocalMonitorForEvents函数实现

356
1196.93 --> 1198.63
监控所有键盘事件

357
1199.07 --> 1202.07
包括其它app的键盘事件
然而 这需要用户批准

358
1203.17 --> 1206.67
在这里你可以看到一个使用
CGEventTapCreate的例子

359
1207.67 --> 1210.61
用于调用按下和释放键事件的回调

360
1211.71 --> 1213.38
这段代码首次运行时

361
1213.91 --> 1218.79
这个调用CGEventTapCreate
将失败并返回无

362
1222.02 --> 1224.83
与此同时给用户显示一个对话框

363
1224.89 --> 1226.66
把用户指向安全与隐私首选项设置

364
1227.29 --> 1230.23
用户可以批准你的app在后台监控
键盘事件

365
1230.56 --> 1232.33
如果他们愿意的话

366
1235.07 --> 1237.2
app可能会检查授权状态

367
1237.27 --> 1238.91
而不需要触发批准提示

368
1240.01 --> 1242.74
使用
IOHIDCheckAccess函数

369
1242.81 --> 1245.95
和kIOHIDRequestTypeListenEvent
参数实现

370
1248.71 --> 1251.55
并且app可以请求显示一个
批准对话框

371
1251.62 --> 1255.26
而不需要使用IOHIDRequestAccess
函数和同一个参数

372
1255.86 --> 1259.83
创建一个事件标签来尝试发布事件

373
1262.36 --> 1265.27
总的来说 macOS Catalina
现在要求用户准许

374
1265.33 --> 1267.7
app记录他们屏幕上的内容

375
1268.2 --> 1269.97
或他们通过键盘进行的键入

376
1270.04 --> 1271.14
（用户隐私权保护记录功能）

377
1271.2 --> 1275.71
现在我想让你们注意一下
macOS如何保护

378
1275.78 --> 1277.28
对你们的隐私敏感性文件的访问

379
1279.28 --> 1281.35
macOS Catalina
继续采用Mojave中的方法

380
1281.91 --> 1286.19
对用户的文件和文件夹的

381
1286.65 --> 1287.99
隐私保护提供两大级别

382
1288.79 --> 1291.33
第一 app通常可能
访问的用户数据

383
1291.39 --> 1292.96
比如联系方式或照片

384
1293.26 --> 1296.3
对于这些数据 macOS将在
与app共享数据之前

385
1296.36 --> 1298.46
确认用户的准许

386
1299.87 --> 1302.24
第二 还有一些用户数据

387
1302.57 --> 1305.24
这些数据在文件系统中只是
一些事实细节

388
1305.31 --> 1306.21
并不是API的一部分

389
1306.94 --> 1310.31
诸如邮件、消息
或Safari浏览历史

390
1311.08 --> 1312.91
要访问这些数据
需要跨过很高的障碍

391
1312.98 --> 1316.25
因为这些文件
一般只能由指定app访问

392
1316.32 --> 1318.32
比如磁盘管理或备份实用程序

393
1319.79 --> 1321.72
但首先让我们谈谈需要用户批准

394
1321.79 --> 1323.56
才能访问的文件和文件夹

395
1325.19 --> 1327.99
macOS Mojave
引入了用户准许要求

396
1328.56 --> 1332.6
用于通过文件系统访问你的

397
1332.93 --> 1333.97
联系方式、日历、提醒或相册

398
1334.73 --> 1336.5
当app尝试访问这些类别中的
任何一个类别的文件时

399
1337.74 --> 1340.44
看起来就是这样一个提示

400
1342.11 --> 1344.74
这与我们刚才看到的

401
1344.81 --> 1348.38
用于屏幕记录和键盘事件记录的
授权对话框不一样

402
1349.32 --> 1352.52
调用线程实际上宁愿被阻止

403
1353.72 --> 1356.02
也不愿意停止访问并给用户显示警告

404
1356.09 --> 1359.59
它会等待用户批准或拒绝app
对该类别的文件的访问

405
1362.23 --> 1363.6
在macOS Catalina中

406
1363.66 --> 1365.16
我们给这些类别补充了

407
1365.97 --> 1370.17
这些额外的类别
包含在系统中用作API的数据

408
1371.4 --> 1374.31
这些代表用户用于存储文档的
不同位置

409
1376.01 --> 1377.31
他们在Finder中双击

410
1378.31 --> 1381.08
通过打开或保存面板进行选择 等等

411
1382.88 --> 1385.99
用户的桌面和文档文件夹
是主要保护对象

412
1386.05 --> 1388.79
因为那是许多用户保存文件的
默认位置

413
1390.12 --> 1393.03
并且因为某些app
包括Safari

414
1393.53 --> 1395.3
在下载时默认把所下载的文件
保存在桌面上

415
1397.8 --> 1400.83
同时也要保护在
iCloud Drive中保存的文档

416
1400.9 --> 1403.8
或在第三方云存储中保存的文档

417
1404.7 --> 1406.21
或在可移除空间中保存的文档

418
1406.27 --> 1407.84
并且如果你像我一样经验丰富

419
1407.91 --> 1409.34
你看能会考虑保护软盘上的文档

420
1409.98 --> 1413.08
但在这里我是指可能会被移除的
任何存储

421
1413.48 --> 1416.08
包括USB拇指驱动或外部磁盘

422
1418.25 --> 1420.49
并且我相信摄影师可以证明

423
1420.85 --> 1423.96
有些人一辈子都使用外部磁盘

424
1424.46 --> 1426.79
或使用网络附加的存储

425
1429.23 --> 1431.46
因此macOS Catalina
现在也保护

426
1431.87 --> 1434.77
我们用于存储文件的绝大多数
常见的位置

427
1437.04 --> 1438.04
现在…

428
1438.94 --> 1442.64
用户不需要批准app

429
1442.71 --> 1444.44
在任意受保护的位置创建新文档

430
1445.58 --> 1447.35
只是为了读取现有内容

431
1448.58 --> 1450.38
文件内容已经存在了

432
1451.15 --> 1453.75
比如说文件传输app

433
1454.49 --> 1457.99
可以继续把新文件保存到用户的
下载文件夹中

434
1458.36 --> 1459.96
而不需要出发准许提示

435
1461.49 --> 1464.57
macOS Catalina中的
用户隐私权保护

436
1465.6 --> 1467.77
现在支持用户意图的概念

437
1469.34 --> 1473.34
当在Finder中双击文件时

438
1473.97 --> 1476.78
当从另一个app中进行拖拽时

439
1477.14 --> 1479.71
或当在打开或保存面板中选择文件时
都会推断用户意图

440
1481.25 --> 1483.35
并且当用户实施任意一种上述动作时

441
1484.85 --> 1489.39
在文件受保护的地方实施
上述任意动作

442
1490.39 --> 1492.76
你的app都将访问用户所选的
一个或多个文件

443
1493.16 --> 1496.1
而不需要触发准许提示

444
1497.96 --> 1501.84
让我们看一下相对于用户准许而言

445
1502.3 --> 1503.67
Catalina如何推断用户意图

446
1505.54 --> 1506.51
抱歉

447
1507.27 --> 1510.28
首先用户准许是被动的

448
1511.01 --> 1515.58
只有当app尝试读写文件时
才能被授予访问权限

449
1516.18 --> 1517.65
然而用户意图是主动的

450
1518.32 --> 1522.15
甚至在app试图读写文件之前
就被授予了访问权限

451
1524.32 --> 1528.13
并且用户准许提示可能会中断
用户的流程

452
1528.39 --> 1532.13
然而用户意图是从标准的UI交互中
推断出来的

453
1533.43 --> 1535.07
为了尽可能减少这些中断

454
1535.34 --> 1538.74
用户准许可应用于所有数据 比如说

455
1538.81 --> 1540.01
你桌面上的所有文件

456
1540.67 --> 1543.38
然而用户意图仅针对

457
1543.44 --> 1544.85
用户所交互的一个或多个文件
进行推断

458
1546.18 --> 1548.28
尽管如此 这两者并不相互排斥

459
1549.25 --> 1551.52
只要你的app访问它所创建的文件

460
1551.85 --> 1553.22
或用户所选的文件

461
1553.75 --> 1555.36
就不需要触发准许提示

462
1556.46 --> 1559.29
但如果你的app要访问处于
隐私受保护位置中的文件

463
1559.79 --> 1561.53
而不是它自己所创建的文件

464
1562.33 --> 1563.9
或也不是用户所选的文件

465
1564.8 --> 1567.57
用户就需要通过准许提示
批准那个访问

466
1568.84 --> 1570.04
有一个常见的情境

467
1570.64 --> 1573.97
app可能需要访问用户所选的
不止一个文件

468
1574.37 --> 1576.68
即附带文件

469
1577.78 --> 1581.48
比如自动打开与电影文件名称相同的
字幕文件

470
1582.28 --> 1585.38
但字幕文件位于电影文件旁边

471
1587.19 --> 1590.22
因此使用NSFileCoordinator中的
相关项支持

472
1591.33 --> 1594.89
可以推断对一个文件的许可

473
1594.96 --> 1597.4
可以扩展到对其它文件的许可

474
1601.43 --> 1604
要使用NSFileCoordinator
打开附带文件

475
1604.51 --> 1608.54
你首先需要在你的app中声明
附带文件的扩展名

476
1609.84 --> 1612.48
CFBundleDocumentTypes Info.plist
密钥

477
1613.28 --> 1619.05
并把NSIsRelatedItemType的
布尔值设为真

478
1620.12 --> 1621.22
然后在你的代码中

479
1622.42 --> 1624.12
创建NSFilePresenter
的子类

480
1625.39 --> 1629.36
把primaryPresentedItemURL
设置到用户所选的文件上

481
1630.2 --> 1632.1
也就是你的app
已经拥有访问权限的那个文件

482
1632.97 --> 1635.34
并把PresentedItemURL
设置到附带文件上

483
1635.67 --> 1637.07
也就是你想要访问的那个文件

484
1638.44 --> 1640.97
请注意 附带文件的扩展名可以

485
1641.47 --> 1642.94
与用户所选文件的扩展名不同

486
1643.01 --> 1645.68
但所有其它组成部分都必须相同

487
1647.28 --> 1648.35
最后

488
1648.62 --> 1653.75
创建NSFileCoordinator
以引用NSFilePresenter实例

489
1655.02 --> 1658.33
当你调用NSFileCoordinator的
协调方法时

490
1658.72 --> 1661.09
在那一段时间内

491
1661.99 --> 1663.1
你的app同时也会获取
对附带文件的访问权限

492
1665.33 --> 1667.77
这是关于app如何使用
NSFileCoordinator

493
1667.84 --> 1670.97
来获取拥有文件名称相同

494
1671.27 --> 1672.81
但扩展名与用户所选的文件不同的

495
1673.57 --> 1676.18
文件的访问权限的简单介绍

496
1676.24 --> 1677.24
而不会触发用户准许提示

497
1678.61 --> 1681.01
为了安全地推断用户意图

498
1681.08 --> 1684.85
现在打开并保存面板总是处于
进程之外

499
1685.95 --> 1688.62
因此类继承和视图等级就发生了改变

500
1689.02 --> 1691.33
这可能会对你的app产生影响

501
1691.39 --> 1694.03
如果你有NSOpenPanel
或NSSave Panel子类的话

502
1696.2 --> 1699.63
app将再也不能

503
1700.1 --> 1702.1
通过调用OK方法显示面板

504
1702.57 --> 1703.97
用户必须自己操作

505
1706.01 --> 1707.21
NSOpenSave PanelDelegate方法

506
1707.27 --> 1710.68
也有些微的修改

507
1712.11 --> 1715.58
app再也不能使用这个方法来重写
用户选择了

508
1718.02 --> 1721.12
访问URL提供给这些方法的文件

509
1721.39 --> 1723.22
可能会触发用户准许提示

510
1723.49 --> 1725.66
因为这些方法是通过面板进行调用的

511
1726.73 --> 1729
而在此过程中用户仍正在与面板
进行交互

512
1729.06 --> 1730.6
因此他们还未选择文件

513
1731.4 --> 1733.6
因此你的app还未被授权访问

514
1735.9 --> 1738.07
现在app可以测试指定文件
是否可读

515
1738.14 --> 1741.78
或可写 而不需要使用这些API
触发准许提示

516
1744.34 --> 1747.88
只要你的app仅访问

517
1748.41 --> 1751.42
它自己所创建的文件或用户…

518
1751.98 --> 1755.76
通过文件打开事件或拖放

519
1755.82 --> 1758.16
或打开面板或保存面板选择
而接收的文件

520
1758.72 --> 1761.33
将推断app被许可访问这些文件

521
1761.39 --> 1763.8
并且没有必要显示准许提示

522
1764.7 --> 1765.67
然而

523
1766.13 --> 1767.93
如果需要显示准许提示

524
1768.67 --> 1772.11
所有新的受保护的文件系统位置
都支持目的字符串

525
1772.94 --> 1774.84
你可以在Info.plist中
指定目的字符串

526
1774.91 --> 1778.95
用于解释当显示准许提示时
访问的情境

527
1783.78 --> 1786.25
用于这些类别的目的字符串是可选的

528
1787.02 --> 1789.56
如果你的app要访问其中一个
受保护的位置

529
1790.29 --> 1791.36
是有意地访问

530
1791.99 --> 1794.89
我们强烈推荐你对该位置添加
目的字符串

531
1794.96 --> 1798.53
从而用户了解app为什么要访问
他们的文档

532
1799.33 --> 1801.2
如果你发现在你的测试中

533
1801.27 --> 1803.77
你的app触发了
你不希望触发的准许提示

534
1804.27 --> 1807.27
你可以点击“不允许”按钮
并进入控制台app

535
1807.34 --> 1809.38
并查找所产生的沙盒冲突

536
1809.44 --> 1812.08
那会告诉你app所尝试访问的文件

537
1812.78 --> 1815.92
并回溯导致它

538
1818.75 --> 1819.95
需要显示准许提示的根由

539
1822.02 --> 1824.59
这即macOS Catalina
如何保护用户的文档

540
1825.03 --> 1828.3
以及标准UI如何
以及如何使用标准UI交互

541
1828.36 --> 1830.8
推断他们期待app访问哪个文档

542
1832.27 --> 1835.8
让我们看一下macOS如何保护

543
1836.07 --> 1837.44
由系统管理的用户数据

544
1837.5 --> 1840.04
以及app如何请求访问那些数据
如果必要的话

545
1842.24 --> 1843.71
在这里我们看到
自macOS Mojave起

546
1843.98 --> 1846.05
就受保护的数据类别

547
1847.68 --> 1851.15
一些软件 比如磁盘管理或备份软件

548
1851.65 --> 1853.79
需要处理所有文件
无论文件内容是什么

549
1854.79 --> 1855.79
并且那些软件…

550
1856.42 --> 1860.06
那些app可以使用与我们刚才
看到过的API相同的API

551
1860.93 --> 1863.1
用于决定给定文件是否可读或可写

552
1863.63 --> 1865.4
然后取决于什么适合app

553
1865.46 --> 1868.67
它们可以跳过不可访问的文件
或它们可以警告用户

554
1868.73 --> 1870.3
并指导他们
在安全与隐私首选项设置中

555
1870.37 --> 1873.21
批准app获取完整权限

556
1877.08 --> 1879.18
这就是用户批准完整磁盘权限的地方

557
1880.98 --> 1882.05
既然我们已经到这了

558
1882.38 --> 1884.88
我想讲一下我们在
macOS Catalina中

559
1884.95 --> 1886.05
所做的一个改进

560
1887.19 --> 1890.62
我们改进了用户批准app
获取完整磁盘权限的方式

561
1890.96 --> 1893.26
同时用户仍可以使用这个加号按钮

562
1893.53 --> 1895.36
手动向列表中添加app

563
1896.63 --> 1898.7
我们从开发者们那里得到的
其中一个反馈是

564
1899.47 --> 1901.43
用户找到他们的app的
特权helper

565
1902.34 --> 1903.64
可能会很尴尬

566
1904.9 --> 1906.67
因此
在macOS Catalina中

567
1907.24 --> 1909.48
由于缺乏完整磁盘权限批准

568
1909.54 --> 1911.61
而被拒绝访问的可执行文件

569
1911.91 --> 1913.98
现在可以未经检查就进行预填充

570
1915.08 --> 1918.05
在这里我们看到这样的helper
可通过它的可执行文件名称识别它

571
1920.25 --> 1922.39
如果那个helper嵌入到
一个捆绑包中

572
1922.76 --> 1924.29
将显示指定捆绑包
Info.plist的

573
1925.26 --> 1928.53
图标中的显示名称

574
1932.53 --> 1934.17
再一次 被预批准获取
完整磁盘权限的app

575
1934.63 --> 1936.94
可以访问这个数据

576
1937.77 --> 1942.31
app使用FileManager
或POSIX级API来测试授权

577
1943.01 --> 1943.84
并且如果有必要的话

578
1943.91 --> 1946.75
还可以指导用户进入
安全与隐私首选项设置

579
1947.85 --> 1951.02
用户可以在那里批准app的权限
如果他们愿意的话

580
1952.79 --> 1955.22
在Catalina中

581
1955.52 --> 1957.92
需要预批准完整磁盘权限的数据

582
1958.39 --> 1961.49
已经进行了扩展 从而包含垃圾数据

583
1963.33 --> 1965.83
许多人认为只要他们把文件
移到回收站中

584
1966.2 --> 1967.73
文件就消失了

585
1968.54 --> 1969.9
因此他们所期待的最后一件事就是

586
1970.34 --> 1972.44
有一个东西能深入到他们的
垃圾文件中

587
1974.34 --> 1975.54
这太吓人了

588
1979.58 --> 1980.88
与其它类别的数据一样

589
1981.48 --> 1983.85
垃圾数据可能包含大量
隐私敏感性数据

590
1983.92 --> 1985.79
然而与其它类别不同

591
1985.85 --> 1989.89
垃圾数据以文件为中心
并确实有操纵这些文件的API

592
1990.49 --> 1991.56
诸如这样的API

593
1992.59 --> 1994.29
会把文件移到用户的回收站中

594
1995.8 --> 1999.6
现在我想稍微深入地讲一下
FileManager回收项API

595
2000.1 --> 2004.4
它把文件的URL作为参数
从而把它移到回收站

596
2006.94 --> 2009.81
调用参数的app需要已经获取
对该文件的访问权限

597
2009.88 --> 2011.74
你不能把你自己
都没有权限访问的文件

598
2011.81 --> 2013.11
移到回收站

599
2014.75 --> 2018.18
但如果成功 它会在文件在用户的
回收站中的新位置上

600
2018.25 --> 2022.52
用文件的NSURL
填充输出结果的URL参数

601
2023.79 --> 2025.89
并且它仍可以访问那个URL

602
2026.56 --> 2028.73
为了讲得通 它在把文件移到回收站
之前拥有对那个文件的访问权限

603
2028.8 --> 2030.63
在它把文件移到回收站之后
它仍然还有那个文件的访问权限

604
2030.7 --> 2033.67
这就可以让你使用
FileManager API 比如

605
2033.73 --> 2035.2
把文件从回收站中移回去

606
2037.6 --> 2040.07
总而言之
当app要求完整磁盘权限

607
2040.41 --> 2041.94
来枚举回收站中的文件时

608
2042.34 --> 2043.78
或来查看那些文件内容时

609
2044.44 --> 2048.01
不需要任何授权就可以把文件
移到回收站

610
2048.08 --> 2050.75
或访问它们之前放在回收站中的文件

611
2053.29 --> 2055.49
最后我要简单讲一下自动化

612
2057.06 --> 2059.99
macOS Mojave
引入了系统或其它app的

613
2060.56 --> 2062.6
自动化准许要求

614
2062.96 --> 2065.33
这对于防止恶意软件滥用你所信任

615
2065.4 --> 2066.6
并与之共享数据的app来说
非常重要

616
2071.51 --> 2073.11
首先是合成事件

617
2073.37 --> 2074.68
合成输入事件

618
2074.74 --> 2078.34
一般由可访问性软件用于提供

619
2079.65 --> 2082.18
对键盘或鼠标输入的帮助

620
2085.18 --> 2086.89
但因为用户准许对话框

621
2087.45 --> 2090.29
用户意图界面或其它各种安全性提示

622
2091.19 --> 2092.93
都依赖于用户输入

623
2093.86 --> 2096.8
合成输入事件仅被允许发生在

624
2096.86 --> 2098.83
用户所安装的用作代理的app中

625
2099.33 --> 2101.5
这一点很重要

626
2103.14 --> 2104.17
这里有段示例代码…

627
2105.37 --> 2108.64
这是一个代码示例 模拟…

628
2109.44 --> 2111.01
按下键和释放键

629
2112.51 --> 2113.85
这段代码首次运行时…

630
2115.68 --> 2118.45
并尝试发布这些事件时
就好像是用户实际上正在键入一样

631
2119.62 --> 2120.69
这些事件被丢弃了

632
2121.95 --> 2125.13
并给用户显示类似这样的对话框
警告用户

633
2125.19 --> 2127.63
他们需要进入安全与隐私首选项设置

634
2128.26 --> 2130.56
授权app获取可访问性功能

635
2132.87 --> 2135.64
之前我们看过这段

636
2135.7 --> 2137.04
用于监听键盘事件的示例代码

637
2138.77 --> 2140.64
如果我把
listenOnly参数改为

638
2141.97 --> 2144.21
defaultTap…

639
2145.48 --> 2146.51
就像那样的

640
2148.15 --> 2151.22
CGEventTapCreate
会创建一个修改事件轻触

641
2151.65 --> 2154.19
而回调可以改动事件流

642
2154.25 --> 2156.92
这意味着现在你的app有一种
可以影响

643
2156.99 --> 2158.66
向系统的其余部分
提交哪些事件的方式

644
2160.29 --> 2163.76
而仅监听事件要求输入监控的授权

645
2164.13 --> 2167.43
修改事件轻触
要求可访问性功能的授权

646
2169.44 --> 2172.54
app可以测试用户
是否已批准app

647
2172.97 --> 2174.54
合成本地…

648
2174.61 --> 2178.64
合成输入事件 通过
IOHIDCheckAccess函数实现

649
2179.41 --> 2181.88
这与检查键盘输入监控授权的API

650
2181.95 --> 2183.72
是同一个API

651
2184.48 --> 2186.39
但你可以在这里看到我们传递了

652
2186.45 --> 2189.86
kIOHIDRequestTypePostEvent

653
2192.43 --> 2194.56
因此这通过合成事件自动化了

654
2195.36 --> 2197.83
现在让我们谈谈通过Apple事件
自动化app

655
2199.5 --> 2202.87
在app用AppleScript
或原生Apple事件

656
2202.94 --> 2205.74
来控制其它app的动作之前
必须经过用户准许

657
2206.91 --> 2208.54
这些准许提示指明了

658
2208.61 --> 2211.24
哪些app处于哪些其它app的
影响之下

659
2211.61 --> 2213.88
并为用户提供了对那个自动化的控制

660
2215.45 --> 2218.32
但没有为发送进程

661
2220.72 --> 2224.82
提供隐私敏感性数据的访问权限的
Apple事件例外

662
2226.13 --> 2228.8
许多这样的时间都经由
NSWorkspace API暴露

663
2231.23 --> 2234.57
AEDeterminePermissionToAutomate
目标函数

664
2235.74 --> 2239.27
可用于测试向目标app发送
Apple事件

665
2239.34 --> 2240.64
是否需要授权

666
2241.74 --> 2242.74
这里有个例子

667
2243.21 --> 2246.21
测试调用者是否可向Keynote
发送任意Apple事件

668
2248.61 --> 2250.35
通过传递布尔值为真

669
2250.85 --> 2252.72
对于
askUserIfNeeded参数

670
2253.09 --> 2256.42
你可以请求…
如果必要的话就触发批准提示

671
2257.62 --> 2259.49
但我要指出的是如果显示了提示

672
2259.56 --> 2262.3
发起调用的线程将被阻止
并等待用户的交互

673
2262.6 --> 2264.8
因此你一定不想在app的主线程上
调用这个API

674
2265.97 --> 2268.14
这个API的级别很低

675
2268.2 --> 2270.7
它会返回一个
OSStatus代码表明

676
2271.27 --> 2275.61
调用者是否被允许向
目标Apple事件

677
2277.21 --> 2279.75
尝试发送Apple事件
是否会触发提示

678
2280.15 --> 2281.48
以确认用户的准许

679
2282.08 --> 2284.12
或目标当前不在运行

680
2284.18 --> 2286.72
而尝试发送可能会导致启动目标的
Apple事件

681
2287.89 --> 2289.59
或是否产生某些报错

682
2291.46 --> 2293.19
这是关于macOS
在允许app自动化其它app之前

683
2293.99 --> 2296.96
如何捕捉用户的准许

684
2297.46 --> 2299.87
以及app如何决定是否提供准许

685
2299.93 --> 2301.03
并进行相应的调整的快速总结

686
2301.47 --> 2302.87
（Catalina中的
新用户隐私权保护）

687
2303.47 --> 2305.2
在macOS Catalina中

688
2305.27 --> 2308.94
需要用户准许才能记录
用户的屏幕或键盘

689
2309.01 --> 2311.74
这对于现有的摄像头和麦克风保护
来说是新添加的功能

690
2312.58 --> 2314.51
现在许多常用的位置…

691
2314.82 --> 2316.72
也保护许多常用的
用于保存文档的位置

692
2316.78 --> 2319.09
比如用户的桌面文档下载

693
2319.95 --> 2322.69
他们的iCloud Drive
或第三方存储

694
2323.46 --> 2325.89
可移除的网络空间以及
当然了 还有回收站

695
2327.93 --> 2331.9
我们在macOS Catalina中也扩展了

696
2332.33 --> 2335.8
隐私权首选项政策控制
MDM有效载荷

697
2335.87 --> 2336.84
以包含新的受保护资源的服务

698
2337.64 --> 2340.14
我想指出在开发过程中

699
2340.57 --> 2343.41
你可能想触发—
当你测试app的行为时

700
2343.48 --> 2344.78
你可以再触发提示

701
2345.28 --> 2349.22
并且你可以使用与你在左侧看到的
服务名称相同的服务名称

702
2350.05 --> 2351.78
通过tccutil命令行工具

703
2352.22 --> 2355.32
分别为受保护的资源重设提示状态

704
2356.16 --> 2357.29
（总结）

705
2357.72 --> 2359.16
之前
我们从Garrett那里了解了

706
2359.23 --> 2360.89
关于Gatekeeper的改进

707
2361.33 --> 2364.16
我们只讨论了一些…

708
2365.07 --> 2368.64
macOS Catalina中
用户隐私权保护方面的改进

709
2369.97 --> 2372.34
我想回顾一下

710
2373.64 --> 2376.58
请记住一定要对你所发布的
所有软件都签名并公证

711
2377.38 --> 2380.41
并且一旦被签署
请不要修改那些捆绑包

712
2381.05 --> 2382.72
如果你确实需要修改捆绑包

713
2383.05 --> 2385.99
请一定要把修改转换到另一个

714
2386.32 --> 2387.39
也被签署了的捆绑包中

715
2391.79 --> 2394.66
对于用户隐私权保护

716
2395.23 --> 2397.3
请尝试尽可能地利用标准UI

717
2397.6 --> 2398.7
一定要处理报错

718
2399.03 --> 2401.07
API可能会返回

719
2401.4 --> 2404.94
如果用户…抱歉
处理API可能会返回的任何报错

720
2405.01 --> 2406.34
如果用户拒绝准许的话

721
2406.91 --> 2409.51
请记住一旦用户授权你的app

722
2409.58 --> 2411.01
访问他们的个人数据

723
2411.45 --> 2414.48
保护他们隐私权的责任就转交给你了

724
2414.82 --> 2416.18
因此请谨慎处理用户的数据

725
2418.25 --> 2419.72
非常感谢你们 希望你们享受

726
2419.79 --> 2421.42
本周WWDC余下的时光

727
2421.49 --> 2424.42
演讲结束之后就有一场
关于安全性的实验室 欢迎大家参加

728
2424.99 --> 2428.56
若你有关于macOS中的安全性或
其它隐私权或安全保护方面的疑问

729
2429 --> 2430.03
非常感谢
